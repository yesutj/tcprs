// This file was automatically generated by bifcl from /home/yesutj/tcprs/src/tcprs.bif (plugin mode).

#if defined(BRO_IN_NETVAR) || ! defined(_home_yesutj_tcprs_build_tcprs_bif)
#ifndef BRO_IN_NETVAR
#ifndef _home_yesutj_tcprs_build_tcprs_bif
#define _home_yesutj_tcprs_build_tcprs_bif
#include "bro-bif.h"
#endif
#endif

namespace BifFunc { namespace TCPRS { extern Val* bro_EnableTCPRSAnalyzer(Frame* frame, val_list*); }  }
namespace TCPRS { extern EventHandlerPtr conn_spurious_dsack;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_spurious_dsack(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_uint_t seq, int is_orig, double rtt, bro_int_t state, bro_uint_t o_seq, bro_uint_t beg_seq, bro_uint_t end_seq, bro_int_t reason, bro_int_t rtype);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_rexmit;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_rexmit(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_uint_t seq, int is_orig, double rtt, bro_int_t state, bro_uint_t o_seq, bro_uint_t beg_seq, bro_uint_t end_seq, bro_int_t reason, bro_int_t rtype, double confidence, bro_int_t flags);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_rtx_summary;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_rtx_summary(analyzer::Analyzer* analyzer, Connection* c, double timestamp, Val* stats, bro_uint_t spurious);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_rtx_types;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_rtx_types(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_int_t rto, bro_int_t fastrtx, bro_int_t retrans, int isdead);  }  } 
namespace TCPRS { extern EventHandlerPtr tcp_dup_ack;  }
namespace BifEvent { namespace TCPRS {  void generate_tcp_dup_ack(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_uint_t seq, bro_int_t num_rtx, int is_orig);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_state_change;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_state_change(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_int_t prev, bro_int_t current, int is_orig);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_dead_event;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_dead_event(analyzer::Analyzer* analyzer, Connection* c, double timestamp, double duration, bro_int_t state, int is_orig);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_ooo_summary;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_ooo_summary(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_int_t orig, bro_int_t resp, bro_int_t total);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_ooo_event;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_ooo_event(analyzer::Analyzer* analyzer, Connection* c, double timestamp, int is_orig, bro_uint_t seq, double gap, double rtt, bro_int_t num_seq, bro_uint_t o_seq, bro_uint_t beg_seq, bro_uint_t end_seq);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_ambi_order;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_ambi_order(analyzer::Analyzer* analyzer, Connection* c, double timestamp, int is_orig, bro_uint_t seq, double gap, bro_int_t num_seq, bro_uint_t o_seq, bro_uint_t beg_seq, bro_uint_t end_seq);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_config;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_config(analyzer::Analyzer* analyzer, Connection* c, double timestamp, int ts, int bad_conn, int sack, int o_sack_offer, int r_sack_offer);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_rtt_estimate;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_rtt_estimate(analyzer::Analyzer* analyzer, Connection* c, double timestamp, double rtt, double c_rtt, double s_rtt);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_limited_transmit;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_limited_transmit(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_uint_t seq, int is_orig, double rtt, bro_int_t state, bro_uint_t o_seq, bro_uint_t beg_seq, bro_uint_t end_seq);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_fast_recovery;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_fast_recovery(analyzer::Analyzer* analyzer, Connection* c, double timestamp, bro_uint_t seq, int is_orig, double rtt, bro_int_t state, bro_uint_t o_seq, bro_uint_t beg_seq, bro_uint_t end_seq);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_initial_rtt;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_initial_rtt(analyzer::Analyzer* analyzer, Connection* c, double timestamp, double rtt, int is_orig);  }  } 
namespace TCPRS { extern EventHandlerPtr conn_initial_rto;  }
namespace BifEvent { namespace TCPRS {  void generate_conn_initial_rto(analyzer::Analyzer* analyzer, Connection* c, double timestamp, double rto, int is_orig);  }  } 

#endif
